/********************************************************************
**       This cc file is generated by program,                     **
**            Please do not change it directly.                    **
**                   Auther: brinkqiang                            **
********************************************************************/
// source: luaipdb.pkg

#include "luaipdb.sol.h"
#include <limits>


#include "ipdb.h"


#include "sol/sol.hpp"
#include "luaipdb.sol.inl"

namespace lua_module_luaipdb
{
    static sol::table require_api(sol::this_state L)
    {
        sol::state_view lua(L);
        sol::table module = lua.create_table();

        module.new_usertype<MetaData>(
            "MetaData"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<>()
            
            );
        module.new_usertype<Reader>(
            "Reader"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<>()
            
            );
        module.new_usertype<ASNInfo>(
            "ASNInfo"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<>()
            
            );
        module.new_usertype<DistrictInfo>(
            "DistrictInfo"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<>()
            
            );
        module.new_usertype<District>(
            "District"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<Reader>()
            
            );
        module.new_usertype<CityInfo>(
            "CityInfo"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<>()
            
            );
        module.new_usertype<City>(
            "City"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<Reader>()
            
            );
        module.new_usertype<BaseStationInfo>(
            "BaseStationInfo"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<>()
            
            );
        module.new_usertype<BaseStation>(
            "BaseStation"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<Reader>()
            
            );
        module.new_usertype<IDCInfo>(
            "IDCInfo"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<>()
            
            );
        module.new_usertype<IDC>(
            "IDC"
            , sol::constructors<>()
            , sol::base_classes, sol::bases<Reader>()
            
            );
        return module;
    }
}

LUA_API int luaopen_luaipdb(lua_State* L)
{
    return sol::stack::call_lua(L, 1, lua_module_luaipdb::require_api);
}

LUA_API int require_luaipdb(lua_State* L)
{
    luaL_requiref(L, "luaipdb", luaopen_luaipdb, 0);
    printf("lua module: require luaipdb\n");
    return 1;
}
